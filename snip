#!/bin/bash
# NAME
#     snip - CLI to manage shell code snippets.
#
# SYNOPSIS
#     snip [command] [options]
#
# DESCRIPTION
#     The snip utility allows users to easily manage bash code snippets.
#     Users can save and execute commands directly from the bash command line,
#     with the provided keybindings. It's also possible to perform operations
#     on the snippet database directly on the command-line.
#
# OPTIONS
#     The first argument is always a command. Commands may or may not have
#     options (see below for a summary).
#
#     add [-f, --file FILENAME] [-D, --delete] [command]
#         The add command adds a new entry to the snip database. Command must
#         be properly quoted and will be added "as-is". The program will ask
#         for a description from the keyboard.
#
#         If used with the `--file` option, snip will read the command to be
#         saved from a filename. Using `--delete` with the `--file` option
#         causes the file to be deleted after its contents are added to the
#         database. This is useful when adding content from temporary files.
#
#     edit
#         Invoke the text editor on the database file. The database is a simple
#         text file using '|' (pipe) as a delimiter. Every line needs to have
#         three exact fields: timestamp, description, and command. It is
#         acceptable for the command to contain pipe characters, but not for
#         the timestamp or description fields.
#
#     find [-q, --query STRING]
#         The find command invokes fzf on the database and prints the
#         command-line for the snippet chosen by the user. The `--query` flag
#         sets the initial query for fzf, if present.
#
#     help
#         This helpful message. :)
#
#     list, ls
#         The list command issues a formatted listing of the snippet database,
#         including the snippet creation timestamps.
#
#     setup
#         This command issues the required commands to setup the bash
#         command-line bindings to easily add snippets and re-run saved
#         snippets. To install snip, run this from your `~/.bashrc` file:
#
#         eval "$(/path/to/snip setup)"
#
#         This will create a few functions in your bash namespace and two
#         bindings. By default they are:
#
#         Ctrl-X Ctrl-N
#             Add the current line as a new snippet. The program will replace
#             the text in the command-line with the appropriate `snip add`
#             command.  All the user needs to do is press the ENTER key to
#             confirm the action and enter a description.
#
#         Ctrl-X Ctrl-R
#             Find and run a saved snippet. This will open an fzf window and
#             allow the user to choose a snippet to run. Once selected, snip
#             will replace the current bash input buffer with the command to
#             run.
#     version
#         Show the program version.
#
# SETUP
#     Just add `eval "$(/path/to/snip setup)"` to your `~/.bashrc`. Depending on your
#     setup, you may need to add it to `~/.profile` as well).
#
# CONFIGURATION FILE
#     On the first run, snip will create a configuration file with default
#     values.
#
#     Currently, it is possible to override a few items in the config file.
#     To do that, edit `~/.config/snip/config` and/edit add the following:
#
#     # bash keybindings
#     #
#     # The two settings below control the bindings for the add and find
#     # commands, respectively. C-key means Control+key. Use man bash and
#     # look for the "bind" command to find the full syntax for the sequence.
#
#     SNIP_BIND_ADD='"\C-x\C-n"'
#     SNIP_BIND_FIND='"\C-x\C-r"'
#
#     # bat (aka batcat) theme. If you have batcat installed, snip will
#     # automatically use it to syntax highlight the snippets in the fzf preview
#     # window. You can override the theme using the setting below.To see all
#     # available themes, run `cat --list-themes` (or `batcat --list-themes`
#     # in some distributions.)
#     BAT_THEME="gruvbox-dark"
#
#     The lines above show the default keybindings to add and run commands.
#     Please keep in mind that this file is sourced directly by the main
#     program, so it should be a valid bash file. Look for the the key syntax
#     for "bind -x" in the bash manpage for details.
#
# REQUIREMENTS
#     This program requires FZF to run (https://github.com/junegunn/fzf). Please note that
#     fzf is very popular and available natively in most Linux distributions.
#
#     If installed, snip will use `batcat` (aka bat) to provide syntax highlighting
#     in the preview window.
#
# AUTHOR
#     (C) Aug/2024 by Marco Paganini <paganini [at] paganini [dot] net>
#

set -o nounset

# Program version
readonly VERSION="0.0.2"

# Default variables
readonly ARGV0="$0"
readonly PROGRAM="${0##*/}"
readonly DB_FILE="${HOME}/.config/snip/db.${HOSTNAME?}"
readonly CONFIG_FILE="${DB_FILE%/*}/config"

# Base column command. Behavior of the last column depends on the command
# (list/find).
readonly COLUMN_BASE_CMD=(
  "column"
  "--table"
  "--table-columns-limit=3"
  "--separator=|"
  "--output-separator=|"
  "--table-column=name=TIMESTAMP"
  "--table-column=name=DESCRIPTION")

readonly COLUMN_LIST_CMD=(
  "${COLUMN_BASE_CMD[@]}"
  "--table-column=name=COMMAND,wrap")

readonly COLUMN_FIND_CMD=(
  "${COLUMN_BASE_CMD[@]}"
  "--table-column=name=COMMAND")

# End of default variables

# usage - print the program usage from top of file comments and exit with an error
# code. The first line containing the hashbang is skipped. The rest is printed
# as the usage. Printing will stop at the end of the first block of comments.
function usage() {
  local line
  local first=1
  while read -r line; do
    if (( first )); then
      first=0
      continue
    fi
    if [[ ! "${line}" =~ ^# ]]; then
      break
    fi
    # Skip '# ' at the beginning of each line.
    cut -c3- <<<"${line}"
  done <"${ARGV0}"
  exit 1
}

function die() {
  echo -e "$1" >&2
  exit 1
}

# check_empty_db - Check if the database is empty and dies with an
# error message.
function check_empty_db() {
  [[ -s "${DB_FILE}" ]] ||
    die "${PROGRAM}: Database file is empty. Try add something with \"snip add\""
}

# save(desc, cmd) - Save a single entry to the database file.
function save() {
  local desc="${1?}"
  local cmd="${2?}"

  echo "$(date '+%Y-%m-%d %H:%M:%S')|${desc}|${cmd}" >>"${DB_FILE}"
}

# add - Add a command to the database.
#
# Parameters:
#   -f, --file FNAME
#       Read the command from the named file. This overrides reading the command
#       from the first argument (below).
#
#   --delete
#       If using "--file", also delete the file after processing.
#
#   COMMAND
#       Read the command from the first argument.
#
function add() {
  # Check Parameters
  TEMP=$(getopt -o Df: --long file,delete -n "${PROGRAM}" -- "$@")
  # shellcheck disable=SC2181
  if [ $? != 0 ]; then
    echo "Error processing add command. Use ${PROGRAM} help for details..." >&2
    exit 2
  fi

  local cmd=""
  local cmd_from_file=""
  local infile=""
  local delete_file=0

  eval set -- "${TEMP}"
  while :; do
    case "$1" in
    -D | --delete)
      delete_file=1
      shift
      ;;
    -f | --file)
      infile="$2"
      cmd_from_file="$(cat "${infile}")"
      if [[ -z "${cmd_from_file}" ]]; then
        echo >&2 "${PROGRAM} Called add with --file, but the file \"${infile}\" appears to be empty."
        return
      fi
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Internal Error."
      exit 2
      ;;
    esac
  done

  # If cmd_from_file is set, it means we've read it from a file. Otherwise, use
  # first parameter passed as the command.
  if [[ -n "${cmd_from_file}" ]]; then
    cmd="${cmd_from_file}"
    echo "Command: ${cmd}"
  else
    if [[ "$#" -ne 1 ]]; then
      die "${PROGRAM}: \"add\" command needs an argument with the command to add."
    fi
    cmd="$1"
  fi

  # Make sure the command does not contain newlines
  if [[ "${cmd}" =~ $'\n' ]]; then
    die "${PROGRAM} ERROR: command cannot contain newlines\nCommand entered:\n${cmd}"
  fi

  # Read description rejecting invalid chars and blank lines.
  while :; do
    read -re -p "Description (one line): " desc
    if [[ "${desc}" =~ [$'\r'$'\n'\|] ]]; then
      echo "ERROR: Description cannot contain pipe (\"|\") characters or newlines. Please try again."
      continue
    fi
    if [[ -z "${desc}" ]]; then
      ## if desc is unset, use cmd and trim pipe+newline
      desc="$(echo ${cmd} | tr -d '|' | tr -d '\n')"
      #echo "ERROR: Description cannot be empty. Please try again."
      #continue
    fi
    break
  done

  # Save and delete infile if needed.
  save "${desc}" "${cmd}"
  if ((delete_file)) && [[ -n "${infile}" ]]; then
    rm -f "${infile}"
  fi
}

# shellcheck disable=SC2120
function edit() {
  # Check parameters.
  if [[ "$#" -ne 0 ]]; then
    die "Use: ${PROGRAM} edit"
  fi

  # Edit the database file using your favorite editor.
  local editor="${VISUAL:-nano}"
  "${editor}" "${DB_FILE}"
}

# shellcheck disable=SC2120
# find - Call fzf on the database and returns the command chosen by the user
# Also accepts "[-q|--query] string" to start search at a given string.
function find() {
  check_empty_db

  # Check Parameters
  TEMP=$(getopt -o q: --long query: -n "${PROGRAM}" -- "$@")
  # shellcheck disable=SC2181
  if [ $? != 0 ]; then
    echo "Error processing find command. Use ${PROGRAM} help for details..." >&2
    exit 2
  fi

  local query=""

  eval set -- "${TEMP}"
  while :; do
    case "$1" in
    -q | --query)
      query="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Internal Error."
      exit 2
      ;;
    esac
  done

  if [[ "$#" -ne 0 ]]; then
    die "Use: ${PROGRAM} find"
  fi

  local fzfcmd=("${FZF_CMD[@]}")
  if [[ -n "${query}" ]]; then
    fzfcmd+=("-q" "${query}")
  fi
  cat <"${DB_FILE}" | "${COLUMN_FIND_CMD[@]}" | "${fzfcmd[@]}" | cut -d'|' -f3-
}

# snip_bind_add - Bindings to add the current command-line to the database.
function snip_bind_add() {
  if [[ -n "${READLINE_LINE}" ]]; then
    tmp="$(mktemp)"
    old_readline_line="${READLINE_LINE}"
    echo "${READLINE_LINE}" >"${tmp}"
    # One space before the program prevents it from being added to the history.
    READLINE_LINE=" ${SNIP_PROGRAM:-snip} add -f ${tmp} --delete ### Command: ${old_readline_line}"
    READLINE_POINT="${#READLINE_LINE}"
  fi
}

# snip_bind_find - Bindings to find a snippet and paste it in the current bash
# command line.
function snip_bind_find() {
  local cmd
  cmd="$("${SNIP_PROGRAM:-snip}" find)"
  if [[ -n "${cmd}" ]]; then
    READLINE_LINE="${cmd}"
    READLINE_POINT="${#READLINE_LINE}"
    READLINE_MARK="${READLINE_POINT}"
  fi
}

# list - List all entries in the database.
function list() {
  check_empty_db
  cat <"${DB_FILE}" | "${COLUMN_LIST_CMD[@]}"
}

# setup - Output code to be evaled from ~/.bashrc. This will install bash
# binds to call snip add and snip find.
function setup() {
  type snip_bind_add | sed 1d
  type snip_bind_find | sed 1d
  echo "export -f snip_bind_add"
  echo "export -f snip_bind_find"
  echo "export SNIP_PROGRAM='${PROGRAM:-snip}'"
  echo "bind -x '${SNIP_BIND_ADD}: snip_bind_add'"
  echo "bind -x '${SNIP_BIND_FIND}: snip_bind_find'"
}

# create_default_config(config_file) - Create a default config file if it doesn't exist.
function create_default_config() {
  local cfile="${1?}"

  rm -f "${cfile}"
  cat >"${cfile}" <<-END
    # Overridable settings
    export SNIP_BIND_ADD='"\C-x\C-n"'
    export SNIP_BIND_FIND='"\C-x\C-r"'
    export BAT_THEME="ansi"
END
}

# get_snippet_formatter - Return a suitable snippet formatter based on the
# arguments and environment.
#
# Args:
#   1) name of array that will receive the command.

function get_snippet_formatter() {
  local -n ret="${1?}"

  # By default, use fold.
  ret=("fold" "-sw" "\${FZF_PREVIEW_COLUMNS}")

  # Use batcat if present.
  for sf in "bat" "batcat"; do
    if type -p "${sf}" >&/dev/null; then
      # shellcheck disable=SC2034
      ret=(
        "${sf}"
        "--theme=\"${BAT_THEME}\""
        "--wrap=character"
        "--terminal-width=\"\${FZF_PREVIEW_COLUMNS}\""
        "--color=always"
        "--language=bash"
      )
      break
    fi
  done
}

# get_fzf_cmd - Return a suitable fzf command.
#
# Args:
#   1) name of the array that will receive the command.
#   2) The name of the snippet formatter array.
function get_fzf_cmd() {
  local -n fzf_cmd_ref="${1?}"
  local -n formatter_ref="${2?}"

  # shellcheck disable=SC2034
  fzf_cmd_ref=(
    "fzf"
    "--no-multi"
    "--ansi"
    "--header-lines=1"
    "--preview"
    "cut -d'|' -f3- <<< {} | ${formatter_ref[*]}"
  )
}

function main() {
  if [[ "$#" -lt 1 ]]; then
    die "Use: ${PROGRAM} <command> [arguments].\nFor further information, use \"snip help\""
  fi

  # Create database directory if needed.
  local db_dir="${DB_FILE%/*}"
  mkdir -p "${db_dir}"

  [[ -s "${CONFIG_FILE}" ]] || create_default_config "${CONFIG_FILE}"
  # shellcheck disable=SC1090
  source "${CONFIG_FILE}"

  get_snippet_formatter SNIPPET_FORMATTER
  get_fzf_cmd FZF_CMD SNIPPET_FORMATTER

  local cmd="$1"

  case "${cmd}" in
  add)
    shift
    add "${@}"
    ;;
  edit)
    shift
    edit
    ;;
  help)
    shift
    usage
    ;;
  find)
    shift
    find "${@}"
    ;;
  list|ls)
    shift
    list
    ;;
  setup)
    shift
    setup
    ;;
  version)
    shift
    echo "v${VERSION}"
    exit 0
    ;;
  *)
    die "${PROGRAM}: Unknown command: \"${cmd}\"\nRun \"snip help\" to see the list of commands"
    ;;
  esac
}

main "${@}"
